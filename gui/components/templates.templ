package components

import "strconv"
import "net/http"
import "gui/models"

templ MainBody(prefs *models.Preferences) {
  <div id="app w-screen">
    <div class="navbar bg-base-300">
        <div class="flex-1 px-2 lg:flex-none">
          <form
            id="subject-form"
            class=""
            hx-post="/hops"
            hx-on::after-request="if(event.detail.successful) this.reset()"
          >
            <span
              id="actioncontainer"
              hx-on::after-swap="sensibleResetPart2()"
            >
              <input
                class="input input-bordered"
                type="text"
                name="subject"
                id="subject"
                placeholder="subject"
                autofocus
              />          
              <button
                class="btn"
                type="submit"
                id="subject-submit"
              >Start</button>
            </span>
          </form>
        </div>
        <div class="flex flex-1 justify-end px-2">
          <div
            tabindex="0"
            role="button"
            class="btn mx-2"
			hx-get="/help"
			hx-trigger="click"
			hx-target="#helpwrapper"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M10 19h3v3h-3zm2-17c5.35.22 7.68 5.62 4.5 9.67c-.83 1-2.17 1.66-2.83 2.5C13 15 13 16 13 17h-3c0-1.67 0-3.08.67-4.08c.66-1 2-1.59 2.83-2.25C15.92 8.43 15.32 5.26 12 5a3 3 0 0 0-3 3H6a6 6 0 0 1 6-6"/></svg>
          </div>
          <div class="dropdown dropdown-end space-y-6">
            <div tabindex="0" role="button" class="btn">
              <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 512 512"><path fill="currentColor" d="M495.9 166.6c3.2 8.7.5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4l-55.6 17.8c-8.8 2.8-18.6.3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4c-1.1-8.4-1.7-16.9-1.7-25.5s.6-17.1 1.7-25.4l-43.3-39.4c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160a80 80 0 1 0 0 160"/></svg>
            </div>
            <ul
            tabindex="0"
            id="preferences"
            class="dropdown-content bg-base-100 rounded-box z-50 mt-4 w-72 p-2 shadow"
            hx-get="/preferences"
            hx-trigger="load"
            hx-target="#preferences">
            </ul>
          </div>
        </div>
      </div>

      <div class="flex flex-col items-center justify-center">
        <div class="overflow-x-auto w-screen">
         <table class="table table-pin-rows w-screen bg-transparent border-collapse">
            <!-- head -->
            <thead>
              <tr>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Hop</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Host</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Loss</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Latency</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Min</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Max</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Jitter</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Min</th>
                <th class="px-4 bg-gray-50 text-gray-700 align-middle py-3 text-xs font-semibold text-left uppercase border-l-0 border-r-0 whitespace-nowrap">Max</th>
              </tr>
            </thead>
            <tbody id="hop-list" class="divide-y divide-gray-100" hx-get="/hops" hx-trigger="every 2s" hx-on::trigger="console.log(event)"></tbody>
          </table>

        </div>
        <!-- -->
    </div>
  </div>
  <div id="modalwrapper"
      hx-on::after-swap="sensibleReset()"
  ></div>
  <div id="helpwrapper"
  ></div>

  <script>
    function sensibleReset(e) {
      htmx.ajax('GET', '/hops/resetsearch', '#actioncontainer')
    }

    // Wait until the server-side is not busy canceling anymore
    function sensibleResetPart2(e) {
      if (document.getElementById('subject-submit').disabled) {
        setTimeout(() => {
          htmx.ajax('GET', '/hops/resetsearch', '#actioncontainer')
        }, 1000)
      }
    }

    function themeUpdateFrontend(theme) {
      document.querySelector('html').setAttribute('data-theme', theme);
    }

    function themeUpdateBackend(theme) {
      var body = {
        theme: theme
      };
      htmx.ajax(
        'POST',
        '/savetheme',
        {
          values: {
            theme: theme
          }
        })
    }

    function themeSelect(e) {
      var cb = document.getElementById('themeselector');
      var theme = 'light';
      if(cb.checked != false) {
        theme = 'dark';
      }
      themeUpdateFrontend(theme);
      themeUpdateBackend(theme);
    }

    htmx.onLoad(function(elt) {
      for (const pref of ['maxhops','timeout','probes','jitter']) {
        const output = document.getElementById(pref + "feedback");
        const input = document.getElementById(pref + "slider");
        output.textContent = input.value; 
        input.addEventListener("input", function() {
          output.textContent = this.value;
        });
      }
    });
    //htmx.logAll();
  </script>
  if prefs.Theme == "dark" {
    <script>
      themeUpdateFrontend("dark");
    </script>
  } else {
    <script>
      themeUpdateFrontend("light");
    </script>
  }
	
}

templ HopTable(Hops []models.FrontendHop) {
	for _,val := range Hops {
                <tr>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.Hop }</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.Host }</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.Loss }%</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.LatencyAvg }ms</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.LatencyMin }ms</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.LatencyMax }ms</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.JitterAvg }ms</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.JitterMin }ms</td>
                  <td class="border-t-0 px-4 align-middle text-xs font-medium whitespace-nowrap p-4">{ val.JitterMax }ms</td>
                </tr>
	}
}

templ Preferences(prefs *models.Preferences) {
              <li>
                <form>
                  <label class="flex cursor-pointer">
                    <span class="label-text w-full">Theme</span>
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round">
                        <circle cx="12" cy="12" r="5" />
                        <path
                          d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4" />
                      </svg>
                      <input
                        type="checkbox"
                        id="themeselector"
                        class="toggle theme-controller"
                        value="synthwave"
                        if prefs.Theme == "dark" { checked }
                        onclick="themeSelect()"
                      />
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                      </svg>
                  </label>
                </form>
              </li>
              <li>
                <form>
                  <label class="flex label cursor-pointer">
                    <span class="label-text w-full">Hostnames</span>
                    <input 
                      type="checkbox"
                      id="cb-resolve"
                      name="cb-resolve"
                      class="checkbox" 
                      if prefs.Resolve { checked }
                      hx-post="/hops/toggleresolve"
                      hx-trigger="change"
                    />
                  </label>
                </form>
              </li>
              <div class="collapse bg-base-200">
                <input type="checkbox" />
                <div class="collapse-title font-medium">Advanced</div>
                <div class="collapse-content">
                  <li>
                    <form>
                      <label class="flex cursor-pointer">
                        <span class="label-text w-full">Max hops (<span id="maxhopsfeedback"></span>)</span>
                          <input id="maxhopsslider" name="maxhopsslider" type="range" min="10" max="100" value={ strconv.Itoa(prefs.MaxHops) } class="range range-info range-xs" hx-post="/hops/savemaxhops" hx-trigger="change" />
                      </label>
                    </form>
                  </li>
                  <li>
                    <form>
                      <label class="flex cursor-pointer">
                        <span class="label-text w-full">Probe timeout (<span id="timeoutfeedback"></span>)</span>
                          <input id="timeoutslider" name="timeoutslider" type="range" min="3" max="10" value={ strconv.Itoa(prefs.Timeout) } class="range range-info range-xs" hx-post="/hops/savetimeout" hx-trigger="change" />
                      </label>
                    </form>
                  </li>
                  <li>
                    <form>
                      <label class="flex cursor-pointer">
                        <span class="label-text w-full">Probes / poke (<span id="probesfeedback"></span>)</span>
                          <input id="probesslider" name="probesslider" type="range" min="1" max="10" value={ strconv.Itoa(prefs.ProbeCount) } class="range range-info range-xs" hx-post="/hops/saveprobes" hx-trigger="change" />
                      </label>
                    </form>
                  </li>
                  <li>
                    <form>
                      <label class="flex cursor-pointer">
                        <span class="label-text w-full">Jitter samples (<span id="jitterfeedback"></span>)</span>
                          <input id="jitterslider" name="jitterslider" type="range" min="4" max="10" value={ strconv.Itoa(prefs.JitterSamples) } class="range range-info range-xs" hx-post="/hops/savejitter" hx-trigger="change" />
                      </label>
                    </form>
                  </li>
                </div>
              </div>
}

templ Modal(title string, message string) {
	<dialog id="modal" class="modal modal-open">
		<div class="modal-box">
			<h3 class="text-lg font-bold">{ title }</h3>
			<p class="py-4">{ message }</p>
			<div class="modal-action">
				<form method="dialog">
					<button
						class="btn"
						hx-trigger="click"
						hx-get="/closemodal"
						hx-target="#modal"
						hx-swap="outerHTML"
					>Close</button>
				</form>
			</div>
		</div>
	</dialog>
}

templ OOBButton(action string) {
	if action == "search" {
              <input
                class="input input-bordered"
                type="text"
                name="subject"
                id="subject"
                placeholder="subject"
				disabled
              />
              <button
                class="btn"
                type="submit"
				id="subject-submit"
              >Stop</button>
			<span class="loading loading-bars inline-block align-middle"></span>
	} else if action == "busy" {
              <input
                class="input input-bordered"
                type="text"
                name="subject"
                id="subject"
                placeholder="subject"
				disabled
              />
              <button
                class="btn cfr-busy"
                type="submit"
				id="subject-submit"
				disabled
              >Stopping</button>
	} else {
              <input
                class="input input-bordered"
                type="text"
                name="subject"
                id="subject"
                placeholder="subject"
				autofocus
              />
              <button
                class="btn"
                type="submit"
				id="subject-submit"
              >Start</button>
	}
}

templ Button(classes string, hxUrl string, hxTarget string, hxSwap string,method string,label string) {
	<button
 		class="btn { classes }"
 		type="submit"
 		hx-target={ hxTarget }
 		hx-trigger="click"
 		hx-swap="outerhtml transition:false"
 		if method == "get" {
			hx-get={ hxUrl }
		}
 		if method == "post" {
			hx-post={ hxUrl }
		}
	>{ label }</button>
}

templ TextInput(name string, placeholder string, method string,endpoint string,hxTrigger string) {
	<input
 		type="text"
 		name={ name }
 		placeholder={ placeholder }
 		hx-target="#result"
 		if method == "get" {
			hx-get={ endpoint }
		}
 		if method == "post" {
			hx-post={ endpoint }
		}
 		hx-trigger={ hxTrigger }
 		class={ "input join-item input-bordered input-primary w-full max-w-xs px-4 py-3 my-8" }
	/>
}

templ VersionComponent(Version string, UpdateText string) {
	<div class="stats shadow mt-auto">
		<div class="stat">
			<div class="stat-title">Current App Version</div>
			<div class="stat-value">{ Version }</div>
			<div class="stat-desc">{ UpdateText }</div>
		</div>
	</div>
}

templ GreetForm(endpoint string) {
	<div class="result" id="result">Please enter your name below 👇</div>
	@TextInput("name","Enter Name","post",endpoint,"keyup changed delay:100ms")
}

func Greet(w http.ResponseWriter, r *http.Request) {
	if r.FormValue("name") != "" {
		w.Write([]byte("Hello " + r.FormValue("name") + ", It's show time!"))
		return
	}
	w.Write([]byte("Please enter your name below 👇"))
}

templ Pages(Pages []struct{Path string;Label string}, appVersion struct{Version string;Text string}) {
	for _, i := range Pages {
		<li hx-boost hx-get={ i.Path } hx-target="#target-form" hx-swap="innerHTML transition:true">
			<a
 				class="font-medium text-2xl"
			>{ i.Label }</a>
		</li>
	}
	@VersionComponent(appVersion.Version,appVersion.Text)
}

templ TestPage(target string, hxswap string) {
	<h1>Test page for components</h1>
	@Button("","/modal",target,hxswap,"post","Preview Modal")
}

templ ModalPreview(title string, data string ) {
	<dialog id="modal" class="modal modal-bottom" open>
		<div class="modal-box">
			<h3 class="font-bold text-lg">{ title }</h3>
			<p class="py-4">{ data }</p>
		</div>
		<form method="dialog" class="modal-backdrop">
			<button>close</button>
		</form>
	</dialog>
}

templ Help() {
	<dialog id="modal" class="modal modal-open">
        <div class="modal-box w-11/12 max-w-full">
			<h3 class="text-lg font-bold">Help</h3>
			<p class="py-2"><span class="font-bold">Preferences</span></p>
			<p class="py-1 px-1"><span class="font-bold">Hostnames</span> When checked, reverse DNS queries will be performed to resolve the IP addresses being discovered.</p>
			<p class="py-2"><span class="font-bold">Advanced preferences</span></p>
			<p class="py-1 px-1"><span class="font-bold">Max Hops</span> Maximum number of hops to check. Stop when we find our final answer, or we reach this number of hops. <em>Default: 30</em></p>
			<p class="py-1 px-1"><span class="font-bold">Probe timeout</span> How many seconds do we wait for a hop to respond. <em>Default: 3</em></p>
			<p class="py-1 px-1"><span class="font-bold">Probes per poke</span> How many probes do we send during each round of hop testing. <em>Default: 3</em></p>
			<div role="alert" class="alert">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                class="stroke-info h-6 w-6 shrink-0">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>Due to the nature of the underlying protocols, lowering the number of hops  may cause the app to report false packet loss.</span>
            </div>
			<p class="py-1 px-1"><span class="font-bold">Jitter samples</span> Number of samples to base recent jitter measurements on. <em>Default: 4</em></p>
			<div class="modal-action">
				<form method="dialog">
					<button
						class="btn"
						hx-trigger="click"
						hx-get="/closemodal"
						hx-target="#modal"
						hx-swap="outerHTML"
					>Close</button>
				</form>
			</div>
		</div>
	</dialog>
}